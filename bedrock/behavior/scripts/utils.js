export function numberToDirection(e){switch(e){case 0:return"north";case 1:return"south";case 2:return"east";case 3:return"west";case 4:return"above";case 5:return"below";default:return"north"}}export function directionToOffset(e){if(null!=e)switch("number"==typeof e&&(e=numberToDirection(e)),e.toLowerCase()){case 0:case"north":return{x:0,y:0,z:-1};case 1:case"south":return{x:0,y:0,z:1};case 2:case"east":return{x:1,y:0,z:0};case 3:case"west":return{x:-1,y:0,z:0};case 4:case"above":case"up":return{x:0,y:1,z:0};case 5:case"below":case"down":return{x:0,y:-1,z:0};default:return{x:0,y:0,z:0}}}var MAX_CACHE=512,CACHE={};export function getNeighborUpdate(e){Object.keys(CACHE).length>MAX_CACHE&&(CACHE={});var t=`${e.block.location.x},${e.block.location.y},${e.block.location.z}`;const o=CACHE[t],r=[e.block.north()?.permutation,e.block.south()?.permutation,e.block.east()?.permutation,e.block.west()?.permutation,e.block.above()?.permutation,e.block.below()?.permutation];if(o){for(let n=0;n<r.length;n++)if(o[n]!=r[n])return CACHE[t]=r,e.block.offset(directionToOffset(n))}else CACHE[t]=r}